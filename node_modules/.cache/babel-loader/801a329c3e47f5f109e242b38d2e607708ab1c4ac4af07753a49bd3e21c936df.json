{"ast":null,"code":"import axios from 'axios';\n// import { trusted } from 'mongoose';\n\naxios.defaults.baseURL = process.env.REACT_APP_SERVER_DOMAIN;\n\n//make API Requests\n\n//authenticat function\nexport async function authenticate(username) {\n  try {\n    return await axios.post('/api/authenticate', {\n      username\n    });\n  } catch (error) {\n    return {\n      error: \"Имя пользователя не существует\"\n    };\n  }\n}\n\n//get User details\nexport async function getUser({\n  username\n}) {\n  try {\n    const {\n      data\n    } = await axios.get(`/api/user/${username}`);\n    return {\n      data\n    };\n  } catch (error) {\n    return {\n      error: \"Пароли не совпадают\"\n    };\n  }\n}\n\n// register user function \nexport async function registerUser(credentials) {\n  try {\n    const {\n      data: {\n        msg\n      },\n      status\n    } = await axios.post(`/api/register`, credentials);\n    let {\n      username,\n      email\n    } = credentials;\n\n    // send mail\n    if (status === 201) {\n      await axios.post('/api/registerMail', {\n        username,\n        userEmail: email,\n        text: msg\n      });\n    }\n    return Promise.resolve(msg);\n  } catch (error) {\n    return Promise.reject({\n      error\n    });\n  }\n}\n\n// login function\nexport async function verifyPassword({\n  username,\n  password\n}) {\n  try {\n    if (username) {\n      const {\n        data\n      } = await axios.post('/api/login', {\n        username,\n        password\n      });\n      return Promise.resolve({\n        data\n      });\n    }\n  } catch (error) {\n    return Promise.reject({\n      error: \"Паролт не совпадают\"\n    });\n  }\n}\n\n// uptade user profile function\nexport async function updateUser(response) {\n  try {\n    const token = await localStorage.getItem('token');\n    const data = await axios.put('/api/updateuser', response, {\n      headers: {\n        \"Авторизациия\": `Bearer ${token}`\n      }\n    });\n    return Promise.resolve({\n      data\n    });\n  } catch (error) {\n    return Promise.reject({\n      error: \"Не возможно обновить профиль\"\n    });\n  }\n}\n\n// generate OTP\nexport async function generateOTP(username) {\n  try {\n    const {\n      data: {\n        code\n      },\n      status\n    } = await axios.get('/api/generateOTP', {\n      params: {\n        username\n      }\n    });\n\n    // send mail with the OTP\n    if (status === 201) {\n      let {\n        data: {\n          email\n        }\n      } = await getUser({\n        username\n      });\n      let text = `Ваш код восстановления пароля: ${code}. Восстановите совой пароль.`;\n      await axios.post('/api/registerMail', {\n        username,\n        userEmail: email,\n        text,\n        subject: \"Код восстановления пароля\"\n      });\n    }\n    return Promise.resolve(code);\n  } catch (error) {\n    return Promise.reject({\n      error: \"\"\n    });\n  }\n}\n\n// verify OTP\nexport async function verifyOTP({\n  username,\n  code\n}) {\n  try {\n    const {\n      data,\n      status\n    } = await axios.get('/api/verifyOTP', {\n      params: {\n        username,\n        code\n      }\n    });\n    return {\n      data,\n      status\n    };\n  } catch (error) {\n    return Promise.reject(error);\n  }\n}\n\n// reset password\nexport async function resetPassword({\n  username,\n  password\n}) {\n  try {\n    const {\n      data,\n      status\n    } = await axios.put('/api/resetPassword', {\n      username,\n      password\n    });\n    return Promise.resolve({\n      data,\n      status\n    });\n  } catch (error) {\n    return Promise.reject({\n      error\n    });\n  }\n}","map":{"version":3,"names":["axios","defaults","baseURL","process","env","REACT_APP_SERVER_DOMAIN","authenticate","username","post","error","getUser","data","get","registerUser","credentials","msg","status","email","userEmail","text","Promise","resolve","reject","verifyPassword","password","updateUser","response","token","localStorage","getItem","put","headers","generateOTP","code","params","subject","verifyOTP","resetPassword"],"sources":["C:/Users/Porhc/OneDrive/Рабочий стол/oil/client/src/helper/helper.js"],"sourcesContent":["import axios from 'axios';\r\n// import { trusted } from 'mongoose';\r\n\r\naxios.defaults.baseURL = process.env.REACT_APP_SERVER_DOMAIN;\r\n\r\n\r\n//make API Requests\r\n\r\n\r\n//authenticat function\r\nexport async function authenticate(username){\r\n    try{\r\n        return await axios.post('/api/authenticate', { username });\r\n    }catch (error) {\r\n        return {\r\n            error : \"Имя пользователя не существует\"\r\n        }\r\n    }\r\n}\r\n\r\n//get User details\r\nexport async function getUser({username}){\r\n    try {\r\n        const { data } = await axios.get(`/api/user/${username}`);\r\n        return{ data };\r\n    }catch(error) {\r\n        return{ error : \"Пароли не совпадают\"}\r\n    }\r\n}\r\n\r\n// register user function \r\nexport async function registerUser(credentials){\r\n    try {\r\n        const { data: { msg }, status } = await axios.post(`/api/register`, credentials);\r\n\r\n        let { username, email } = credentials;\r\n\r\n        // send mail\r\n        if(status === 201){\r\n            await axios.post('/api/registerMail', {username, userEmail : email, text : msg})\r\n        }\r\n\r\n        return Promise.resolve(msg)\r\n    } catch (error) {\r\n        return Promise.reject({ error })\r\n    }\r\n}\r\n\r\n// login function\r\nexport async function verifyPassword({ username, password}){\r\n    try {\r\n        if(username){\r\n           const { data } = await axios.post('/api/login', { username, password });\r\n           return Promise.resolve({ data })\r\n        }\r\n    } catch (error) {\r\n        return Promise.reject({error : \"Паролт не совпадают\"})\r\n    }\r\n}\r\n\r\n// uptade user profile function\r\nexport async function updateUser(response){\r\n    try {\r\n        const token = await localStorage.getItem('token');\r\n        const data = await axios.put('/api/updateuser', response, {headers : { \"Авторизациия\" : `Bearer ${token}`}});\r\n\r\n        return Promise.resolve({ data })\r\n    } catch (error) {\r\n        return Promise.reject({ error : \"Не возможно обновить профиль\"})\r\n    }\r\n}\r\n\r\n// generate OTP\r\nexport async function generateOTP(username){\r\n    try {\r\n        const { data : { code }, status } = await axios.get('/api/generateOTP', { params : { username}});\r\n\r\n        // send mail with the OTP\r\n        if(status === 201){\r\n            let { data : { email }} = await getUser({ username });\r\n            let text = `Ваш код восстановления пароля: ${code}. Восстановите совой пароль.`;\r\n            await axios.post('/api/registerMail', { username, userEmail: email, text, subject : \"Код восстановления пароля\"});\r\n        }\r\n        return Promise.resolve(code);\r\n    } catch (error) {\r\n        return Promise.reject({ error : \"\"});\r\n    }\r\n}\r\n\r\n// verify OTP\r\nexport async function verifyOTP({ username, code }){\r\n    try {\r\n        const { data, status } = await axios.get('/api/verifyOTP', { params : { username, code }});\r\n        return { data, status }\r\n    } catch (error) {\r\n        return Promise.reject(error)\r\n    }\r\n}\r\n\r\n// reset password\r\nexport async function resetPassword({ username, password }){\r\n    try {\r\n        const { data, status } = await axios.put('/api/resetPassword', { username, password });\r\n        return Promise.resolve({ data, status})\r\n    } catch (error) {\r\n        return Promise.reject({ error })\r\n    }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}