{"ast":null,"code":"import axios from 'axios';\n// import { trusted } from 'mongoose';\nimport { jwtDecode } from \"jwt-decode\";\naxios.defaults.baseURL = process.env.REACT_APP_SERVER_DOMAIN;\n\n//make API Requests\n\n// получение ниак из токена\nexport async function getUsername() {\n  const token = localStorage.getItem('token');\n  if (!token) return Promise.reject(\"Не получается найти токен\");\n  let decode = jwtDecode(token);\n  console.log(decode);\n}\n\n//authenticat function\nexport async function authenticate(username) {\n  try {\n    return await axios.post('/api/authenticate', {\n      username\n    });\n  } catch (error) {\n    return {\n      error: \"Имя пользователя не существует\"\n    };\n  }\n}\n\n//get User details\nexport async function getUser({\n  username\n}) {\n  try {\n    const {\n      data\n    } = await axios.get(`/api/user/${username}`);\n    return {\n      data\n    };\n  } catch (error) {\n    return {\n      error: \"Пароли не совпадают\"\n    };\n  }\n}\n\n// register user function \nexport async function registerUser(credentials) {\n  try {\n    const {\n      data: {\n        msg\n      },\n      status\n    } = await axios.post(`/api/register`, credentials);\n    let {\n      username,\n      email\n    } = credentials;\n\n    // send mail\n    if (status === 201) {\n      await axios.post('/api/registerMail', {\n        username,\n        userEmail: email,\n        text: msg\n      });\n    }\n    return Promise.resolve(msg);\n  } catch (error) {\n    return Promise.reject({\n      error\n    });\n  }\n}\n\n// login function\nexport async function verifyPassword({\n  username,\n  password\n}) {\n  try {\n    if (username) {\n      const {\n        data\n      } = await axios.post('/api/login', {\n        username,\n        password\n      });\n      return Promise.resolve({\n        data\n      });\n    }\n  } catch (error) {\n    return Promise.reject({\n      error: \"Пароли не совпадают\"\n    });\n  }\n}\n\n// uptade user profile function\nexport async function updateUser(response) {\n  try {\n    const token = await localStorage.getItem('token');\n    const data = await axios.put('/api/updateuser', response, {\n      headers: {\n        \"Authorization\": `Bearer ${token}`\n      }\n    });\n    return Promise.resolve({\n      data\n    });\n  } catch (error) {\n    return Promise.reject({\n      error: \"Не возможно обновить профиль\"\n    });\n  }\n}\n\n// generate OTP\nexport async function generateOTP(username) {\n  try {\n    const {\n      data: {\n        code\n      },\n      status\n    } = await axios.get('/api/generateOTP', {\n      params: {\n        username\n      }\n    });\n\n    // send mail with the OTP\n    if (status === 201) {\n      let {\n        data: {\n          email\n        }\n      } = await getUser({\n        username\n      });\n      let text = `Ваш код восстановления пароля: ${code}. Восстановите совой пароль.`;\n      await axios.post('/api/registerMail', {\n        username,\n        userEmail: email,\n        text,\n        subject: \"Код восстановления пароля\"\n      });\n    }\n    return Promise.resolve(code);\n  } catch (error) {\n    return Promise.reject({\n      error: \"\"\n    });\n  }\n}\n\n// verify OTP\nexport async function verifyOTP({\n  username,\n  code\n}) {\n  try {\n    const {\n      data,\n      status\n    } = await axios.get('/api/verifyOTP', {\n      params: {\n        username,\n        code\n      }\n    });\n    return {\n      data,\n      status\n    };\n  } catch (error) {\n    return Promise.reject(error);\n  }\n}\n\n// reset password\nexport async function resetPassword({\n  username,\n  password\n}) {\n  try {\n    const {\n      data,\n      status\n    } = await axios.put('/api/resetPassword', {\n      username,\n      password\n    });\n    return Promise.resolve({\n      data,\n      status\n    });\n  } catch (error) {\n    return Promise.reject({\n      error\n    });\n  }\n}","map":{"version":3,"names":["axios","jwtDecode","defaults","baseURL","process","env","REACT_APP_SERVER_DOMAIN","getUsername","token","localStorage","getItem","Promise","reject","decode","console","log","authenticate","username","post","error","getUser","data","get","registerUser","credentials","msg","status","email","userEmail","text","resolve","verifyPassword","password","updateUser","response","put","headers","generateOTP","code","params","subject","verifyOTP","resetPassword"],"sources":["C:/Users/Porhc/OneDrive/Рабочий стол/oil/client/src/helper/helper.js"],"sourcesContent":["import axios from 'axios';\r\n// import { trusted } from 'mongoose';\r\nimport { jwtDecode } from \"jwt-decode\";\r\n\r\naxios.defaults.baseURL = process.env.REACT_APP_SERVER_DOMAIN;\r\n\r\n\r\n//make API Requests\r\n\r\n\r\n// получение ниак из токена\r\nexport async function getUsername() {\r\n    const token = localStorage.getItem('token')\r\n    if(!token) return Promise.reject(\"Не получается найти токен\");\r\n    let decode = jwtDecode (token)\r\n    console.log(decode);\r\n}\r\n\r\n//authenticat function\r\nexport async function authenticate(username){\r\n    try{\r\n        return await axios.post('/api/authenticate', { username });\r\n    }catch (error) {\r\n        return {\r\n            error : \"Имя пользователя не существует\"\r\n        }\r\n    }\r\n}\r\n\r\n//get User details\r\nexport async function getUser({username}){\r\n    try {\r\n        const { data } = await axios.get(`/api/user/${username}`);\r\n        return{ data };\r\n    }catch(error) {\r\n        return{ error : \"Пароли не совпадают\"}\r\n    }\r\n}\r\n\r\n// register user function \r\nexport async function registerUser(credentials){\r\n    try {\r\n        const { data: { msg }, status } = await axios.post(`/api/register`, credentials);\r\n\r\n        let { username, email } = credentials;\r\n\r\n        // send mail\r\n        if(status === 201){\r\n            await axios.post('/api/registerMail', {username, userEmail : email, text : msg})\r\n        }\r\n\r\n        return Promise.resolve(msg)\r\n    } catch (error) {\r\n        return Promise.reject({ error })\r\n    }\r\n}\r\n\r\n// login function\r\nexport async function verifyPassword({ username, password}){\r\n    try {\r\n        if(username){\r\n           const { data } = await axios.post('/api/login', { username, password });\r\n           return Promise.resolve({ data })\r\n        }\r\n    } catch (error) {\r\n        return Promise.reject({error : \"Пароли не совпадают\"})\r\n    }\r\n}\r\n\r\n// uptade user profile function\r\nexport async function updateUser(response){\r\n    try {\r\n        const token = await localStorage.getItem('token');\r\n        const data = await axios.put('/api/updateuser', response, { headers : { \"Authorization\" : `Bearer ${token}`}});\r\n\r\n        return Promise.resolve({ data })\r\n    } catch (error) {\r\n        return Promise.reject({ error : \"Не возможно обновить профиль\"})\r\n    }\r\n}\r\n\r\n// generate OTP\r\nexport async function generateOTP(username){\r\n    try {\r\n        const { data : { code }, status } = await axios.get('/api/generateOTP', { params : { username}});\r\n\r\n        // send mail with the OTP\r\n        if(status === 201){\r\n            let { data : { email }} = await getUser({ username });\r\n            let text = `Ваш код восстановления пароля: ${code}. Восстановите совой пароль.`;\r\n            await axios.post('/api/registerMail', { username, userEmail: email, text, subject : \"Код восстановления пароля\"});\r\n        }\r\n        return Promise.resolve(code);\r\n    } catch (error) {\r\n        return Promise.reject({ error : \"\"});\r\n    }\r\n}\r\n\r\n// verify OTP\r\nexport async function verifyOTP({ username, code }){\r\n    try {\r\n        const { data, status } = await axios.get('/api/verifyOTP', { params : { username, code }});\r\n        return { data, status }\r\n    } catch (error) {\r\n        return Promise.reject(error)\r\n    }\r\n}\r\n\r\n// reset password\r\nexport async function resetPassword({ username, password }){\r\n    try {\r\n        const { data, status } = await axios.put('/api/resetPassword', { username, password });\r\n        return Promise.resolve({ data, status})\r\n    } catch (error) {\r\n        return Promise.reject({ error })\r\n    }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}