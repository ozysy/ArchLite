{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Porhc\\\\OneDrive\\\\\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B\\\\oil\\\\client\\\\src\\\\components\\\\Mail.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Mail = () => {\n  _s();\n  const [formData, setFormData] = useState({\n    firstName: '',\n    lastName: '',\n    email: '',\n    subject: '',\n    text: ''\n  });\n  const [message, setMessage] = useState('');\n  useEffect(() => {\n    const fetchUserData = async () => {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        setMessage('You must be logged in to send a message.');\n        return;\n      }\n      try {\n        const response = await fetch('http://localhost:8080/api/currentUser', {\n          headers: {\n            'Authorization': `Bearer ${token}`\n          }\n        });\n        if (response.ok) {\n          const data = await response.json();\n          setFormData(prevData => ({\n            ...prevData,\n            firstName: data.firstName,\n            lastName: data.lastName,\n            email: data.email\n          }));\n        } else {\n          const error = await response.json();\n          setMessage(`Error: ${error.error}`);\n        }\n      } catch (error) {\n        setMessage(`Error: ${error.message}`);\n      }\n    };\n    fetchUserData();\n  }, []);\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const token = localStorage.getItem('token');\n    if (!token) {\n      setMessage('You must be logged in to send a message.');\n      return;\n    }\n    try {\n      const response = await fetch('http://localhost:8080/api/sendMail', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify({\n          username: `${formData.firstName} ${formData.lastName}`,\n          userEmail: formData.email,\n          subject: formData.subject,\n          text: formData.text\n        })\n      });\n      const result = await response.json();\n      if (response.ok) {\n        setMessage('Message sent successfully!');\n      } else {\n        setMessage(`Error: ${result.error}`);\n      }\n    } catch (error) {\n      setMessage(`Error: ${error.message}`);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: formData.firstName,\n        onChange: e => setFormData({\n          ...formData,\n          firstName: e.target.value\n        }),\n        placeholder: \"\\u0418\\u043C\\u044F\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: formData.lastName,\n        onChange: e => setFormData({\n          ...formData,\n          lastName: e.target.value\n        }),\n        placeholder: \"\\u0424\\u0430\\u043C\\u0438\\u043B\\u0438\\u044F\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"email\",\n        value: formData.email,\n        onChange: e => setFormData({\n          ...formData,\n          email: e.target.value\n        }),\n        placeholder: \"Email\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: formData.subject,\n        onChange: e => setFormData({\n          ...formData,\n          subject: e.target.value\n        }),\n        placeholder: \"\\u0422\\u0435\\u043C\\u0430\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: formData.text,\n        onChange: e => setFormData({\n          ...formData,\n          text: e.target.value\n        }),\n        placeholder: \"\\u0421\\u043E\\u043E\\u0431\\u0449\\u0435\\u043D\\u0438\\u0435\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"\\u041E\\u0442\\u043F\\u0440\\u0430\\u0432\\u0438\\u0442\\u044C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 29\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 9\n  }, this);\n};\n_s(Mail, \"P5PnmvkE1YW7W3IGIpk++Rl77Ac=\");\n_c = Mail;\nexport default Mail;\nvar _c;\n$RefreshReg$(_c, \"Mail\");","map":{"version":3,"names":["React","useState","useEffect","Mail","formData","setFormData","firstName","lastName","email","subject","text","message","setMessage","fetchUserData","token","localStorage","getItem","response","fetch","headers","ok","data","json","prevData","error","handleSubmit","e","preventDefault","method","body","JSON","stringify","username","userEmail","result","target","value"],"sources":["C:/Users/Porhc/OneDrive/Рабочий стол/oil/client/src/components/Mail.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst Mail = () => {\r\n    const [formData, setFormData] = useState({\r\n        firstName: '',\r\n        lastName: '',\r\n        email: '',\r\n        subject: '',\r\n        text: ''\r\n    });\r\n\r\n    const [message, setMessage] = useState('');\r\n\r\n    useEffect(() => {\r\n        const fetchUserData = async () => {\r\n            const token = localStorage.getItem('token');\r\n            if (!token) {\r\n                setMessage('You must be logged in to send a message.');\r\n                return;\r\n            }\r\n\r\n            try {\r\n                const response = await fetch('http://localhost:8080/api/currentUser', {\r\n                    headers: {\r\n                        'Authorization': `Bearer ${token}`\r\n                    }\r\n                });\r\n                if (response.ok) {\r\n                    const data = await response.json();\r\n                    setFormData(prevData => ({\r\n                        ...prevData,\r\n                        firstName: data.firstName,\r\n                        lastName: data.lastName,\r\n                        email: data.email\r\n                    }));\r\n                } else {\r\n                    const error = await response.json();\r\n                    setMessage(`Error: ${error.error}`);\r\n                }\r\n            } catch (error) {\r\n                setMessage(`Error: ${error.message}`);\r\n            }\r\n        };\r\n\r\n        fetchUserData();\r\n    }, []);\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n\r\n        const token = localStorage.getItem('token');\r\n\r\n        if (!token) {\r\n            setMessage('You must be logged in to send a message.');\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const response = await fetch('http://localhost:8080/api/sendMail', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': `Bearer ${token}`\r\n                },\r\n                body: JSON.stringify({\r\n                    username: `${formData.firstName} ${formData.lastName}`,\r\n                    userEmail: formData.email,\r\n                    subject: formData.subject,\r\n                    text: formData.text\r\n                })\r\n            });\r\n\r\n            const result = await response.json();\r\n\r\n            if (response.ok) {\r\n                setMessage('Message sent successfully!');\r\n            } else {\r\n                setMessage(`Error: ${result.error}`);\r\n            }\r\n        } catch (error) {\r\n            setMessage(`Error: ${error.message}`);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <form onSubmit={handleSubmit}>\r\n                    <input\r\n                        type=\"text\"\r\n                        value={formData.firstName}\r\n                        onChange={(e) => setFormData({ ...formData, firstName: e.target.value })}\r\n                        placeholder=\"Имя\"\r\n                        required\r\n                    />\r\n                    <input\r\n                        type=\"text\"\r\n                        value={formData.lastName}\r\n                        onChange={(e) => setFormData({ ...formData, lastName: e.target.value })}\r\n                        placeholder=\"Фамилия\"\r\n                        required\r\n                    />\r\n                    <input\r\n                        type=\"email\"\r\n                        value={formData.email}\r\n                        onChange={(e) => setFormData({ ...formData, email: e.target.value })}\r\n                        placeholder=\"Email\"\r\n                        required\r\n                    />\r\n                    <input\r\n                        type=\"text\"\r\n                        value={formData.subject}\r\n                        onChange={(e) => setFormData({ ...formData, subject: e.target.value })}\r\n                        placeholder=\"Тема\"\r\n                        required\r\n                    />\r\n                    <textarea\r\n                        value={formData.text}\r\n                        onChange={(e) => setFormData({ ...formData, text: e.target.value })}\r\n                        placeholder=\"Сообщение\"\r\n                        required\r\n                    ></textarea>\r\n                    <button type=\"submit\">Отправить</button>\r\n                </form>\r\n\r\n                {message && <p>{message}</p>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Mail;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}