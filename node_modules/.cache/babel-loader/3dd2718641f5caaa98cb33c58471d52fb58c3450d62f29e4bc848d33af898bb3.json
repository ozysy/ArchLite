{"ast":null,"code":"import axios from'axios';// import { trusted } from 'mongoose';\nimport{jwtDecode}from\"jwt-decode\";axios.defaults.baseURL=process.env.REACT_APP_SERVER_DOMAIN;//make API Requests\n// получение ниka из токена\nexport async function getUsername(){const token=localStorage.getItem('token');if(!token)return Promise.reject(\"Не получается найти токен\");let decode=jwtDecode(token);// console.log(decode);\nreturn decode;}//authenticat function\nexport async function authenticate(username){try{return await axios.post('/api/authenticate',{username});}catch(error){return{error:\"Имя пользователя не существует\"};}}//get User details\nexport async function getUser(_ref){let{username}=_ref;try{const{data}=await axios.get(\"/api/user/\".concat(username));return{data};}catch(error){return{error:\"Пароли не совпадают\"};}}// register user function \nexport async function registerUser(credentials){try{const{data:{msg},status}=await axios.post(\"/api/register\",credentials);let{username,email}=credentials;// send mail\nif(status===201){await axios.post('/api/registerMail',{username,userEmail:email,text:msg});}return Promise.resolve(msg);}catch(error){return Promise.reject({error});}}// login function\nexport async function verifyPassword(_ref2){let{username,password}=_ref2;try{if(username){const{data}=await axios.post('/api/login',{username,password});return Promise.resolve({data});}}catch(error){return Promise.reject({error:\"Пароли не совпадают\"});}}// uptade user profile function\nexport async function updateUser(response){try{const token=await localStorage.getItem('token');const data=await axios.put('/api/updateuser',response,{headers:{\"Authorization\":\"Bearer \".concat(token)}});return Promise.resolve({data});}catch(error){return Promise.reject({error:\"Не возможно обновить профиль\"});}}// generate OTP\nexport async function generateOTP(username){try{const{data:{code},status}=await axios.get('/api/generateOTP',{params:{username}});// send mail with the OTP\nif(status===201){let{data:{email}}=await getUser({username});let text=\"\\u0412\\u0430\\u0448 \\u043A\\u043E\\u0434 \\u0432\\u043E\\u0441\\u0441\\u0442\\u0430\\u043D\\u043E\\u0432\\u043B\\u0435\\u043D\\u0438\\u044F \\u043F\\u0430\\u0440\\u043E\\u043B\\u044F: \".concat(code,\". \\u0412\\u043E\\u0441\\u0441\\u0442\\u0430\\u043D\\u043E\\u0432\\u0438\\u0442\\u0435 \\u0441\\u043E\\u0432\\u043E\\u0439 \\u043F\\u0430\\u0440\\u043E\\u043B\\u044C.\");await axios.post('/api/registerMail',{username,userEmail:email,text,subject:\"Код восстановления пароля\"});}return Promise.resolve(code);}catch(error){console.error(\"ошибка создания кода\",error);return Promise.reject({error:error.message||\"Произошла ошибка при генерации OTP\"});}}// verify OTP\nexport async function verifyOTP(_ref3){let{username,code}=_ref3;try{console.log(\"Sending request to verify OTP with:\",{username,code});const{data,status}=await axios.get('/api/verifyOTP',{params:{username,code}});return{data,status};}catch(error){console.error(\"Error verifying OTP:\",error);return Promise.reject(error);}}// reset password\nexport async function resetPassword(_ref4){let{username,password}=_ref4;try{const{data,status}=await axios.put('/api/resetPassword',{username,password});return Promise.resolve({data,status});}catch(error){return Promise.reject({error});}}","map":{"version":3,"names":["axios","jwtDecode","defaults","baseURL","process","env","REACT_APP_SERVER_DOMAIN","getUsername","token","localStorage","getItem","Promise","reject","decode","authenticate","username","post","error","getUser","_ref","data","get","concat","registerUser","credentials","msg","status","email","userEmail","text","resolve","verifyPassword","_ref2","password","updateUser","response","put","headers","generateOTP","code","params","subject","console","message","verifyOTP","_ref3","log","resetPassword","_ref4"],"sources":["C:/Users/Porhc/OneDrive/Рабочий стол/oil/client/src/helper/helper.js"],"sourcesContent":["import axios from 'axios';\r\n// import { trusted } from 'mongoose';\r\nimport { jwtDecode } from \"jwt-decode\";\r\n\r\naxios.defaults.baseURL = process.env.REACT_APP_SERVER_DOMAIN;\r\n\r\n\r\n//make API Requests\r\n\r\n\r\n// получение ниka из токена\r\nexport async function getUsername() {\r\n    const token = localStorage.getItem('token')\r\n    if(!token) return Promise.reject(\"Не получается найти токен\");\r\n    let decode = jwtDecode (token)\r\n    // console.log(decode);\r\n    return decode\r\n}\r\n\r\n//authenticat function\r\nexport async function authenticate(username){\r\n    try{\r\n        return await axios.post('/api/authenticate', { username });\r\n    }catch (error) {\r\n        return {\r\n            error : \"Имя пользователя не существует\"\r\n        }\r\n    }\r\n}\r\n\r\n//get User details\r\nexport async function getUser({username}){\r\n    try {\r\n        const { data } = await axios.get(`/api/user/${username}`);\r\n        return{ data };\r\n    }catch(error) {\r\n        return{ error : \"Пароли не совпадают\"}\r\n    }\r\n}\r\n\r\n// register user function \r\nexport async function registerUser(credentials){\r\n    try {\r\n        const { data: { msg }, status } = await axios.post(`/api/register`, credentials);\r\n\r\n        let { username, email } = credentials;\r\n\r\n        // send mail\r\n        if(status === 201){\r\n            await axios.post('/api/registerMail', {username, userEmail : email, text : msg})\r\n        }\r\n\r\n        return Promise.resolve(msg)\r\n    } catch (error) {\r\n        return Promise.reject({ error })\r\n    }\r\n}\r\n\r\n// login function\r\nexport async function verifyPassword({ username, password}){\r\n    try {\r\n        if(username){\r\n           const { data } = await axios.post('/api/login', { username, password });\r\n           return Promise.resolve({ data })\r\n        }\r\n    } catch (error) {\r\n        return Promise.reject({error : \"Пароли не совпадают\"})\r\n    }\r\n}\r\n\r\n// uptade user profile function\r\nexport async function updateUser(response){\r\n    try {\r\n        const token = await localStorage.getItem('token');\r\n        const data = await axios.put('/api/updateuser', response, { headers : { \"Authorization\" : `Bearer ${token}`}});\r\n\r\n        return Promise.resolve({ data })\r\n    } catch (error) {\r\n        return Promise.reject({ error : \"Не возможно обновить профиль\"})\r\n    }\r\n}\r\n\r\n// generate OTP\r\nexport async function generateOTP(username){\r\n    try {\r\n        const { data : { code }, status } = await axios.get('/api/generateOTP', { params : { username}});\r\n\r\n        // send mail with the OTP\r\n        if(status === 201){\r\n            let { data : { email }} = await getUser({ username });\r\n            let text = `Ваш код восстановления пароля: ${code}. Восстановите совой пароль.`;\r\n            await axios.post('/api/registerMail', { username, userEmail: email, text, subject : \"Код восстановления пароля\"});\r\n        }\r\n        return Promise.resolve(code);\r\n    } catch (error) {\r\n        console.error(\"ошибка создания кода\", error);\r\n        return Promise.reject({ error : error.message || \"Произошла ошибка при генерации OTP\" });\r\n    }\r\n}\r\n\r\n// verify OTP\r\nexport async function verifyOTP({ username, code }) {\r\n    try {\r\n        console.log(\"Sending request to verify OTP with:\", { username, code });\r\n        const { data, status } = await axios.get('/api/verifyOTP', { params: { username, code } });\r\n        return { data, status };\r\n    } catch (error) {\r\n        console.error(\"Error verifying OTP:\", error);\r\n        return Promise.reject(error);\r\n    }\r\n}\r\n\r\n// reset password\r\nexport async function resetPassword({ username, password }){\r\n    try {\r\n        const { data, status } = await axios.put('/api/resetPassword', { username, password });\r\n        return Promise.resolve({ data, status})\r\n    } catch (error) {\r\n        return Promise.reject({ error })\r\n    }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}