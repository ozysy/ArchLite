{"ast":null,"code":"import axios from 'axios';\n// import { trusted } from 'mongoose';\nimport jwtDecode from 'jwt-decode';\naxios.defaults.baseURL = process.env.REACT_APP_SERVER_DOMAIN;\n\n//make API Requests\n\n// получение ниka из токена\nexport async function getUsername() {\n  const token = localStorage.getItem('token');\n  if (!token) return Promise.reject(\"Не получается найти токен\");\n  let decode = jwtDecode(token);\n  // console.log(decode);\n  return decode;\n}\n\n//authenticat function\nexport async function authenticate(username) {\n  try {\n    return await axios.post('/api/authenticate', {\n      username\n    });\n  } catch (error) {\n    return {\n      error: \"Имя пользователя не существует\"\n    };\n  }\n}\n\n//get User details\nexport async function getUser(_ref) {\n  let {\n    username\n  } = _ref;\n  try {\n    const {\n      data\n    } = await axios.get(`/api/user/${username}`);\n    return {\n      data\n    };\n  } catch (error) {\n    return {\n      error: \"Пароли не совпадают\"\n    };\n  }\n}\n\n// register user function \nexport async function registerUser(credentials) {\n  try {\n    const {\n      data: {\n        msg\n      },\n      status\n    } = await axios.post(`/api/register`, credentials);\n    let {\n      username,\n      email\n    } = credentials;\n\n    // send mail\n    if (status === 201) {\n      await axios.post('/api/registerMail', {\n        username,\n        userEmail: email,\n        text: msg\n      });\n    }\n    return Promise.resolve(msg);\n  } catch (error) {\n    return Promise.reject({\n      error\n    });\n  }\n}\n\n// login function\nexport async function verifyPassword(_ref2) {\n  let {\n    username,\n    password\n  } = _ref2;\n  try {\n    if (username) {\n      const {\n        data\n      } = await axios.post('/api/login', {\n        username,\n        password\n      });\n      return Promise.resolve({\n        data\n      });\n    }\n  } catch (error) {\n    return Promise.reject({\n      error: \"Пароли не совпадают\"\n    });\n  }\n}\n\n// uptade user profile function\nexport async function updateUser(response) {\n  try {\n    const token = await localStorage.getItem('token');\n    const data = await axios.put('/api/updateuser', response, {\n      headers: {\n        \"Authorization\": `Bearer ${token}`\n      }\n    });\n    return Promise.resolve({\n      data\n    });\n  } catch (error) {\n    return Promise.reject({\n      error: \"Не возможно обновить профиль\"\n    });\n  }\n}\n\n// generate OTP\nexport async function generateOTP(username) {\n  try {\n    const {\n      data: {\n        code\n      },\n      status\n    } = await axios.get('/api/generateOTP', {\n      params: {\n        username\n      }\n    });\n\n    // send mail with the OTP\n    if (status === 201) {\n      let {\n        data: {\n          email\n        }\n      } = await getUser({\n        username\n      });\n      let text = `Ваш код восстановления пароля: ${code}. Восстановите совой пароль.`;\n      await axios.post('/api/registerMail', {\n        username,\n        userEmail: email,\n        text,\n        subject: \"Код восстановления пароля\"\n      });\n    }\n    return Promise.resolve(code);\n  } catch (error) {\n    console.error(\"ошибка создания кода\", error);\n    return Promise.reject({\n      error: error.message || \"Произошла ошибка при генерации OTP\"\n    });\n  }\n}\n\n// verify OTP\nexport async function verifyOTP(_ref3) {\n  let {\n    username,\n    code\n  } = _ref3;\n  try {\n    console.log(\"Sending request to verify OTP with:\", {\n      username,\n      code\n    });\n    const {\n      data,\n      status\n    } = await axios.get('/api/verifyOTP', {\n      params: {\n        username,\n        code\n      }\n    });\n    return {\n      data,\n      status\n    };\n  } catch (error) {\n    console.error(\"Error verifying OTP:\", error);\n    return Promise.reject(error);\n  }\n}\n\n// reset password\nexport async function resetPassword(_ref4) {\n  let {\n    username,\n    password\n  } = _ref4;\n  try {\n    const {\n      data,\n      status\n    } = await axios.put('/api/resetPassword', {\n      username,\n      password\n    });\n    return Promise.resolve({\n      data,\n      status\n    });\n  } catch (error) {\n    return Promise.reject({\n      error\n    });\n  }\n}","map":{"version":3,"names":["axios","jwtDecode","defaults","baseURL","process","env","REACT_APP_SERVER_DOMAIN","getUsername","token","localStorage","getItem","Promise","reject","decode","authenticate","username","post","error","getUser","data","get","registerUser","credentials","msg","status","email","userEmail","text","resolve","verifyPassword","password","updateUser","response","put","headers","generateOTP","code","params","subject","console","message","verifyOTP","log","resetPassword"],"sources":["C:/Users/Porhc/OneDrive/Рабочий стол/oil/client/src/helper/helper.js"],"sourcesContent":["import axios from 'axios';\n// import { trusted } from 'mongoose';\nimport jwtDecode from 'jwt-decode';\n\naxios.defaults.baseURL = process.env.REACT_APP_SERVER_DOMAIN;\n\n\n//make API Requests\n\n\n// получение ниka из токена\nexport async function getUsername() {\n    const token = localStorage.getItem('token')\n    if(!token) return Promise.reject(\"Не получается найти токен\");\n    let decode = jwtDecode (token)\n    // console.log(decode);\n    return decode\n}\n\n//authenticat function\nexport async function authenticate(username){\n    try{\n        return await axios.post('/api/authenticate', { username });\n    }catch (error) {\n        return {\n            error : \"Имя пользователя не существует\"\n        }\n    }\n}\n\n//get User details\nexport async function getUser({username}){\n    try {\n        const { data } = await axios.get(`/api/user/${username}`);\n        return{ data };\n    }catch(error) {\n        return{ error : \"Пароли не совпадают\"}\n    }\n}\n\n// register user function \nexport async function registerUser(credentials){\n    try {\n        const { data: { msg }, status } = await axios.post(`/api/register`, credentials);\n\n        let { username, email } = credentials;\n\n        // send mail\n        if(status === 201){\n            await axios.post('/api/registerMail', {username, userEmail : email, text : msg})\n        }\n\n        return Promise.resolve(msg)\n    } catch (error) {\n        return Promise.reject({ error })\n    }\n}\n\n// login function\nexport async function verifyPassword({ username, password}){\n    try {\n        if(username){\n           const { data } = await axios.post('/api/login', { username, password });\n           return Promise.resolve({ data })\n        }\n    } catch (error) {\n        return Promise.reject({error : \"Пароли не совпадают\"})\n    }\n}\n\n// uptade user profile function\nexport async function updateUser(response){\n    try {\n        const token = await localStorage.getItem('token');\n        const data = await axios.put('/api/updateuser', response, { headers : { \"Authorization\" : `Bearer ${token}`}});\n\n        return Promise.resolve({ data })\n    } catch (error) {\n        return Promise.reject({ error : \"Не возможно обновить профиль\"})\n    }\n}\n\n// generate OTP\nexport async function generateOTP(username){\n    try {\n        const { data : { code }, status } = await axios.get('/api/generateOTP', { params : { username}});\n\n        // send mail with the OTP\n        if(status === 201){\n            let { data : { email }} = await getUser({ username });\n            let text = `Ваш код восстановления пароля: ${code}. Восстановите совой пароль.`;\n            await axios.post('/api/registerMail', { username, userEmail: email, text, subject : \"Код восстановления пароля\"});\n        }\n        return Promise.resolve(code);\n    } catch (error) {\n        console.error(\"ошибка создания кода\", error);\n        return Promise.reject({ error : error.message || \"Произошла ошибка при генерации OTP\" });\n    }\n}\n\n// verify OTP\nexport async function verifyOTP({ username, code }) {\n    try {\n        console.log(\"Sending request to verify OTP with:\", { username, code });\n        const { data, status } = await axios.get('/api/verifyOTP', { params: { username, code } });\n        return { data, status };\n    } catch (error) {\n        console.error(\"Error verifying OTP:\", error);\n        return Promise.reject(error);\n    }\n}\n\n// reset password\nexport async function resetPassword({ username, password }){\n    try {\n        const { data, status } = await axios.put('/api/resetPassword', { username, password });\n        return Promise.resolve({ data, status})\n    } catch (error) {\n        return Promise.reject({ error })\n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}