{"ast":null,"code":"import toast from 'react-hot-toast';\n\n// validate login page username\n\nexport async function usernameValidate(values) {\n  const errors = usernameVerify({}, values);\n  return errors;\n}\n\n// validate password\nexport async function passwordValidate(values) {\n  const errors = passwordVerify({}, values);\n  return errors;\n}\n\n// validate reset password\nexport async function resetPasswordValidation(values) {\n  const errors = passwordVerify({}, values);\n  if (values.password !== values.confirm_pwd) {\n    errors.exist = toast.error(\"Пароли не совпадают\");\n  }\n  return errors;\n}\n\n// validate register form\nexport async function registerValidation(values) {\n  const errors = usernameVerify({}, values);\n  passwordVerify(errors, values);\n  emailVerify(errors, values);\n  return errors;\n}\n\n/** validate profile page */\nexport async function profileValidation(values) {\n  const errors = emailVerify({}, values);\n  return errors;\n}\n\n// *******************************************************************************\n\n// validate password\nfunction passwordVerify(errors = {}, values) {\n  /* eslint-disable no-useless-escape */\n  const specialChars = /[`!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?~]/;\n  if (!values.password) {\n    errors.password = toast.error(\"Требуется пароль!\");\n  } else if (values.password.includes(\" \")) {\n    errors.password = toast.error(\"Неправильный пароль!\");\n  } else if (values.password.length < 4) {\n    errors.password = toast.error(\"Пароль должен быть длиннее 4 символов\");\n  } else if (!specialChars.test(values.password)) {\n    errors.password = toast.error(\"Пароль должен иметь специальный символ\");\n  }\n  return errors;\n}\n\n// validate username\nfunction usernameVerify(error = {}, values) {\n  if (!values.username) {\n    error.username = toast.error('Требуется имя пользователя!');\n  } else if (values.username.includes(\" \")) {\n    error.username = toast.error('Неверное имя пользователя!');\n  }\n  return error;\n}\n\n// validate email\nfunction emailVerify(error = {}, values) {\n  if (!values.email) {\n    error.email = toast.error(\"Требуется электронная почта!\");\n  } else if (values.email.includes(\" \")) {\n    error.email = toast.error(\"Неправильный адрес электронной почты!\");\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n    error.email = toast.error(\"Неверный адрес электронной почты!\");\n  }\n  return error;\n}","map":{"version":3,"names":["toast","usernameValidate","values","errors","usernameVerify","passwordValidate","passwordVerify","resetPasswordValidation","password","confirm_pwd","exist","error","registerValidation","emailVerify","profileValidation","specialChars","includes","length","test","username","email"],"sources":["C:/Users/Porhc/OneDrive/Рабочий стол/oil/client/src/helper/validate.js"],"sourcesContent":["import toast from 'react-hot-toast'\r\n\r\n// validate login page username\r\n\r\nexport async function usernameValidate(values){\r\n    const errors = usernameVerify({}, values);\r\n\r\n    return errors;\r\n}\r\n\r\n// validate password\r\nexport async function passwordValidate(values){\r\n    const errors = passwordVerify({}, values);\r\n\r\n    return errors;\r\n}\r\n\r\n// validate reset password\r\nexport async function resetPasswordValidation(values) {\r\n    const errors = passwordVerify({}, values);\r\n\r\n    if(values.password !== values.confirm_pwd){\r\n        errors.exist = toast.error(\"Пароли не совпадают\")\r\n    }\r\n\r\n    return errors;\r\n}\r\n\r\n// validate register form\r\nexport async function registerValidation(values){\r\n    const errors = usernameVerify({}, values);\r\n    passwordVerify(errors, values);\r\n    emailVerify(errors, values);\r\n\r\n    return errors;\r\n}\r\n\r\n/** validate profile page */\r\nexport async function profileValidation(values){\r\n    const errors = emailVerify({}, values);\r\n    return errors;\r\n}\r\n\r\n// *******************************************************************************\r\n\r\n// validate password\r\nfunction passwordVerify(errors = {}, values){\r\n    /* eslint-disable no-useless-escape */\r\n    const specialChars = /[`!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?~]/;\r\n\r\n    if(!values.password){\r\n        errors.password = toast.error(\"Требуется пароль!\");\r\n    } else if(values.password.includes(\" \")){\r\n        errors.password = toast.error(\"Неправильный пароль!\");\r\n    }else if(values.password.length < 4){\r\n        errors.password = toast.error(\"Пароль должен быть длиннее 4 символов\");\r\n    }else if(!specialChars.test(values.password)){\r\n        errors.password = toast.error(\"Пароль должен иметь специальный символ\");\r\n    }\r\n\r\n    return errors;\r\n}\r\n\r\n// validate username\r\nfunction usernameVerify(error = {}, values){\r\n    if(!values.username){\r\n        error.username = toast.error('Требуется имя пользователя!');\r\n    }else if(values.username.includes(\" \")){\r\n        error.username = toast.error('Неверное имя пользователя!')\r\n    }\r\n\r\n    return error;\r\n}\r\n\r\n// validate email\r\nfunction emailVerify(error ={}, values){\r\n    if(!values.email){\r\n        error.email = toast.error(\"Требуется электронная почта!\");\r\n    }else if(values.email.includes(\" \")){\r\n        error.email = toast.error(\"Неправильный адрес электронной почты!\")\r\n    }else if(!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)){\r\n        error.email = toast.error(\"Неверный адрес электронной почты!\")\r\n    }\r\n\r\n    return error;\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}