{"ast":null,"code":"import toast from 'react-hot-toast';\nimport { authenticate } from './helper';\n\n// validate login page username\n\nexport async function usernameValidate(values) {\n  const errors = usernameVerify({}, values);\n  if (values.username) {\n    //check user exist or not\n    const {\n      status\n    } = await authenticate(values.username);\n    if (status !== 200) {\n      errors.exist = toast.error('Пользователь не существует');\n    }\n  }\n  return errors;\n}\n\n// validate password\nexport async function passwordValidate(values) {\n  const errors = passwordVerify({}, values);\n  return errors;\n}\n\n// validate reset password\nexport async function resetPasswordValidation(values) {\n  const errors = passwordVerify({}, values);\n  if (values.password !== values.confirm_pwd) {\n    errors.exist = toast.error(\"Пароли не совпадают\");\n  }\n  return errors;\n}\n\n// validate register form\nexport async function registerValidation(values) {\n  const errors = usernameVerify({}, values);\n  passwordVerify(errors, values);\n  emailVerify(errors, values);\n  return errors;\n}\n\n/** validate profile page */\nexport async function profileValidation(values) {\n  const errors = emailVerify({}, values);\n  return errors;\n}\n\n// *******************************************************************************\n\n// validate password\nfunction passwordVerify() {\n  let errors = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let values = arguments.length > 1 ? arguments[1] : undefined;\n  /* eslint-disable no-useless-escape */\n  const specialChars = /[`!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?~]/;\n  if (!values.password) {\n    errors.password = toast.error(\"Требуется пароль!\");\n  } else if (values.password.includes(\" \")) {\n    errors.password = toast.error(\"Неправильный пароль!\");\n  } else if (values.password.length < 4) {\n    errors.password = toast.error(\"Пароль должен быть длиннее 4 символов\");\n  } else if (!specialChars.test(values.password)) {\n    errors.password = toast.error(\"Пароль должен иметь специальный символ\");\n  }\n  return errors;\n}\n\n// validate username\nfunction usernameVerify() {\n  let error = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let values = arguments.length > 1 ? arguments[1] : undefined;\n  if (!values.username) {\n    error.username = toast.error('Требуется имя пользователя!');\n  } else if (values.username.includes(\" \")) {\n    error.username = toast.error('Неверное имя пользователя!');\n  }\n  return error;\n}\n\n// validate email\nfunction emailVerify() {\n  let error = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let values = arguments.length > 1 ? arguments[1] : undefined;\n  if (!values.email) {\n    error.email = toast.error(\"Требуется электронная почта!\");\n  } else if (values.email.includes(\" \")) {\n    error.email = toast.error(\"Неправильный адрес электронной почты!\");\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n    error.email = toast.error(\"Неверный адрес электронной почты!\");\n  }\n  return error;\n}","map":{"version":3,"names":["toast","authenticate","usernameValidate","values","errors","usernameVerify","username","status","exist","error","passwordValidate","passwordVerify","resetPasswordValidation","password","confirm_pwd","registerValidation","emailVerify","profileValidation","specialChars","includes","length","test","email"],"sources":["C:/Users/Porhc/OneDrive/Рабочий стол/oil/client/src/helper/validate.js"],"sourcesContent":["import toast from 'react-hot-toast'\nimport { authenticate } from './helper'\n\n// validate login page username\n\nexport async function usernameValidate(values){\n    const errors = usernameVerify({}, values);\n\n    if(values.username){\n        //check user exist or not\n        const { status } = await authenticate(values.username);\n\n        if(status !== 200){\n            errors.exist = toast.error('Пользователь не существует')\n        }\n    }\n\n    return errors;\n}\n\n// validate password\nexport async function passwordValidate(values){\n    const errors = passwordVerify({}, values);\n\n    return errors;\n}\n\n// validate reset password\nexport async function resetPasswordValidation(values) {\n    const errors = passwordVerify({}, values);\n\n    if(values.password !== values.confirm_pwd){\n        errors.exist = toast.error(\"Пароли не совпадают\")\n    }\n\n    return errors;\n}\n\n// validate register form\nexport async function registerValidation(values){\n    const errors = usernameVerify({}, values);\n    passwordVerify(errors, values);\n    emailVerify(errors, values);\n\n    return errors;\n}\n\n/** validate profile page */\nexport async function profileValidation(values){\n    const errors = emailVerify({}, values);\n    return errors;\n}\n\n// *******************************************************************************\n\n// validate password\nfunction passwordVerify(errors = {}, values){\n    /* eslint-disable no-useless-escape */\n    const specialChars = /[`!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?~]/;\n\n    if(!values.password){\n        errors.password = toast.error(\"Требуется пароль!\");\n    } else if(values.password.includes(\" \")){\n        errors.password = toast.error(\"Неправильный пароль!\");\n    }else if(values.password.length < 4){\n        errors.password = toast.error(\"Пароль должен быть длиннее 4 символов\");\n    }else if(!specialChars.test(values.password)){\n        errors.password = toast.error(\"Пароль должен иметь специальный символ\");\n    }\n\n    return errors;\n}\n\n// validate username\nfunction usernameVerify(error = {}, values){\n    if(!values.username){\n        error.username = toast.error('Требуется имя пользователя!');\n    }else if(values.username.includes(\" \")){\n        error.username = toast.error('Неверное имя пользователя!')\n    }\n\n    return error;\n}\n\n// validate email\nfunction emailVerify(error ={}, values){\n    if(!values.email){\n        error.email = toast.error(\"Требуется электронная почта!\");\n    }else if(values.email.includes(\" \")){\n        error.email = toast.error(\"Неправильный адрес электронной почты!\")\n    }else if(!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)){\n        error.email = toast.error(\"Неверный адрес электронной почты!\")\n    }\n\n    return error;\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}